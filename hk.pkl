amends "package://github.com/jdx/hk/releases/download/v1.10.7/hk@1.10.7#/Config.pkl"
import "package://github.com/jdx/hk/releases/download/v1.10.7/hk@1.10.7#/Builtins.pkl"

// https://megalinter.io/latest/supported-linters/

local function deno(name: String): Mapping<String, Step> = new Mapping<String, Step> {
  // Deno: https://docs.deno.com/runtime/fundamentals/linting_and_formatting/
  // https://docs.deno.com/runtime/reference/cli/fmt/
  ["deno:fmt_\(name)"] {
    workspace_indicator = name
    glob = List("*.js", "*.jsx", "*.ts", "*.tsx", "deno.jsonc")
    stage = glob
    check = "mise exec -C {{workspace}} -- deno fmt --check {{workspace_files}}"
    fix = "mise exec -C {{workspace}} -- deno fmt {{workspace_files}}"
    check_first = false
  }
  // https://docs.deno.com/runtime/reference/cli/check/
  ["deno:check_\(name)"] {
    workspace_indicator = name
    glob = List("*.js", "*.jsx", "*.ts", "*.tsx")
    stage = glob
    check = "mise exec -C {{workspace}} -- deno check --doc {{workspace_files}}"
  }
  // https://docs.deno.com/runtime/reference/cli/lint/
  ["deno:lint_\(name)"] {
    workspace_indicator = name
    glob = List("*.js", "*.jsx", "*.ts", "*.tsx")
    stage = glob
    check = "mise exec -C {{workspace}} -- deno lint {{workspace_files}}"
    fix = "mise exec -C {{workspace}} -- deno lint --fix {{workspace_files}}"
    check_first = false
  }
}

local language_linters = new Mapping<String, Step> {
  // # Bash
  // config: .shellcheckrc
  // TODO: bash-exec
  ["bash:shellcheck"] {
    glob = List("*.sh", "*.bash", "*.dash", "*.ksh")
    prefix = "mise exec shellcheck --"
    check = "shellcheck --color=always {{files}}"
  }
  ["bash:shfmt"] {
    glob = List("*.sh", "*.bash", "*.dash", "*.ksh")
    stage = glob
    prefix = "mise exec shfmt --"
    check = "shfmt --diff {{files}}"
    fix = "shfmt --write --simplify --indent 2 {{files}}"
    check_first = false
  }

  // # Deno
  ...deno("deno.json")
  ...deno("deno.jsonc")

  // # Kotlin
  // config: .ktlint.editorconfig (or .editorconfig)
  ["kotlin:ktlint"] {
    workspace_indicator = ".ktlint.editorconfig"
    glob = List("*.kt", "*.kts")
    stage = glob
    prefix = "mise exec ktlint --"
    check = "ktlint --editorconfig {{workspace_indicator}} {{files}}"
    fix = "ktlint --editorconfig {{workspace_indicator}} --format {{ files }}"
    check_first = false
  }
  // TODO: detekt

  // # Lua
  ["lua:stylua"] {
    glob = List("*.lua")
    stage = glob
    prefix = "mise exec stylua --"
    check = "stylua --check {{files}}"
    fix = "stylua {{files}}"
    check_first = false
  }

  // # Rust
  // config: Cargo.toml (.clippy.toml)
  ["rust:cargo_clippy"] {
    workspace_indicator = "Cargo.toml"
    glob = List("*.rs")
    stage = glob
    prefix = "mise exec -C {{workspace}} --"
    check = "cargo clippy --quiet"
    fix = "cargo clippy --fix --allow-dirty --allow-staged --quiet"
    check_first = false
    env {
      ["CARGO_TERM_PROGRESS_WHEN"] = "never"
    }
  }
  ["rust:cargo_fmt"] {
    workspace_indicator = "Cargo.toml"
    glob = List("*.rs")
    stage = glob
    prefix = "mise exec -C {{workspace}} --"
    check = "cargo fmt --check"
    fix = "cargo fmt"
    check_first = false
    env {
      ["CARGO_TERM_PROGRESS_WHEN"] = "never"
    }
  }

  // # Scala
  // TODO: scalafix
  ["scala:scalafmt"] {
    workspace_indicator = ".scalafmt.conf"
    glob = "*.scala"
    stage = glob
    prefix = "mise exec scala-cli --"
    check = "scala-cli format --scalafmt-conf {{workspace_indicator}} --check {{files}}"
    fix = "scala-cli format --scalafmt-conf {{workspace_indicator}} {{files}}"
    check_first = false
  }
}

local format_linters = new Mapping<String, Step> {
  // # CSS
  // config: .stylelintrc.json
  ["css:stylelint"] {
    glob = List("*.css", "*.scss", "*.sass")
    stage = glob
    prefix = "mise exec stylelint --"
    check = "stylelint --color {{files}}"
    fix = "stylelint --color --fix {{files}}"
    check_first = false
  }

  // # ENV
  // TODO: dotenv-linter

  // # GraphQL

  // # HTML

  // # JSON
  ["json:jsonlint"] {
    glob = "*.json"
    prefix = "mise exec bun npm:@prantlf/jsonlint --"
    check = "jsonlint --quiet --comments --trailing-commas --no-duplicate-keys {{files}}"
  }

  // # Markdown
  ["markdown:markdownlint"] {
    glob = List("*.md", "*.markdown")
    stage = glob
    prefix = "mise exec bun markdownlint-cli2 --"
    check = "markdownlint-cli2 {{files}}"
    fix = "markdownlint-cli2 --fix {{files}}"
    check_first = false
    env {
      ["MISE_NPM_BUN"] = "true"
    }
  }

  // # npm
  ["npm:sort_package_json"] {
    glob = List("package.json")
    stage = glob
    prefix = "mise exec bun npm:sort-package-json --"
    check = "sort-package-json --check {{files}}"
    fix = "sort-package-json {{files}}"
    check_first = false
  }

  // # Pkl
  ["pkl"] {
    glob = "*.pkl"
    prefix = "mise exec pkl --"
    check = "pkl eval {{files}} >/dev/null"
  }

  // # TOML
  ["toml:taplo"] {
    glob = "*.toml"
    stage = glob
    prefix = "mise exec taplo --"
    check = "taplo check --colors=always {{files}}"
    fix = "taplo format --colors=always {{files}}"
    check_first = false
  }

  // # XML
  ["xml:xmllint"] {
    glob = "*.xml"
    prefix = "mise exec xmllint --"
    check = "xmllint --noout {{files}}"
  }

  // # YAML
  ["yaml:yamllint"] {
    glob = List("*.yaml", "*.yml")
    prefix = "mise exec python pipx yamllint --"
    check = "yamllint {{files}}"
  }
  ["yaml:yq"] {
    glob = List("*.yaml", "*.yml")
    stage = glob
    prefix = "mise exec yq --"
    // fix = "yq -iP {{files}}"
  }
}

local tooling_format_linters = new Mapping<String, Step> {
  // # GitHub Actions
  ["gha:actionlint"] {
    glob = List(".github/workflows/*.yml", ".github/workflows/*.yaml")
    prefix = "mise exec actionlint shellcheck --"
    check = "actionlint {{files}}"
    batch = true
  }

  // # Dockerfile
  ["dockerfile:hadolint"] {
    glob = List("Dockerfile", "Dockerfile.*")
    prefix = "mise exec hadolint --"
    check = "hadolint {{files}}"
  }

  // TODO: editorconfig-checker
}

local linters = new Mapping<String, Step> {
  ...language_linters
  ...format_linters
  ...tooling_format_linters
}

hooks {
    ["pre-commit"] {
        fix = true
        steps {
            ...linters
        }
    }

    ["post-commit"] {
    }

    ["post-checkout"] {
    }

    ["pre-push"] {
    }

    ["prepare-commit-msg"] {
    }

    ["fix"] {
        fix = true
        steps {
            ...linters
        }
    }
    ["check"] {
        steps {
            ...linters
        }
    }
}
